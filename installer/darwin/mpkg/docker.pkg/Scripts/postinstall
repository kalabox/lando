#!/bin/bash

# Unset some things that could S the P
unset DYLD_LIBRARY_PATH
unset LD_LIBRARY_PATH
unset ${!DOCKER_*}

# Define some config
PATH=$PATH:/usr/local/bin
TERM=xterm

# Kill docker if running
killall Docker || true

# Get the user originale
declare -r console_user=$(stat -f '%Su' /dev/console)

# Set some docker things
declare -r docker_engine_ip=127.0.0.1
declare -r docker_bundle_dir=/Applications/Docker.app/Contents
declare -r docker=${docker_bundle_dir}/Resources/bin/docker

# Make sure some core directories exist
sudo mkdir -p /Library/PrivilegedHelperTools
sudo mkdir -p /usr/local/bin

# Set up our VMNET things
sudo launchctl unload /Library/LaunchDaemons/com.docker.vmnetd.plist && sleep 10 || true
sudo install -m 0544 -o root -g wheel ${docker_bundle_dir}/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools
sudo install -m 0644 -o root -g wheel ${docker_bundle_dir}/Resources/com.docker.vmnetd.plist /Library/LaunchDaemons
sudo plutil -insert Version -string 56 /Library/LaunchDaemons/com.docker.vmnetd.plist || true
sudo launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist

# Launch docker
sudo -u ${console_user} open -a /Applications/Docker.app

# Disable autoupdates and tutorial, we dump this for the first
sudo -u ${console_user} cat > "~/Library/Group Containers/group.com.docker/settings.json" <<EOF
{
  "checkForUpdates" : false,
  "displayedTutorial" : true
}
EOF
# And then do another pass just in case
sudo -u ${console_user} sed -i -e 's/\"checkForUpdates\" : true,/\"checkForUpdates\" : false,/g' ~/Library/Group\ Containers/group.com.docker/settings.json
sudo -u ${console_user} sed -i -e 's/\"displayedTutorial\" : false,/\"displayedTutorial\" : true,/g' ~/Library/Group\ Containers/group.com.docker/settings.json

# Wait for docker to be ready
NEXT_WAIT_TIME=0
until ${docker} info >/dev/null || [ $NEXT_WAIT_TIME -eq 10 ]; do
  sleep $(( NEXT_WAIT_TIME++ ))
done

# Fin
