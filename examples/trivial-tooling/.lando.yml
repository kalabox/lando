# Tooling example
name: trivial-tooling

# Proxy the basics
proxy:
  nginx:
    - trivial-tooling.lndo.site

# Let up a basic LEMP stack
services:
  appserver:
    type: php:7.1
    via: nginx
    webroot: www
    # Run composer install after we start our app
    run:
      - "cd $LANDO_MOUNT && composer install"
    # Add in a helper script to showcase some magic below
    overrides:
      services:
        volumes:
          - $LANDO_APP_ROOT_BIND/word.sh:/helpers/word.sh
  cli:
    type: node:6.10
  database:
    type: mariadb
    portforward: true

# This section defines our tooling routes
tooling:

  # Define `lando composer` as a command that runs `composer --ansi @` against
  # the appserver service. Note that @ will be any additional arguments you pass
  # into `lando composer`
  #
  # Example: typing `lando composer install` will run `composer --ansi install`
  # inside the container.
  composer:

    # Run the `lando composer` command against the appserver from the services
    # section above
    service: appserver

    # Give a nice description to describe what this does.
    # If ommited this will default to "Run COMMAND commands" where COMMAND is
    # composer in this case
    description: Run composer commands

    # Define a specific command to start with inside the container. If ommited
    # this will default to the name you give the service eg composer.
    #
    # This can be a string or an array. We recommend using an array if you are
    # passing in additional options that you might want to enforce.
    cmd:
      - composer
      - --ansi

  # Define `lando php` as a command that runs `php @` against the appserver where
  # @ is additional input from the user.
  php:

    # Run this command against the appserver
    service: appserver

    # Run this command as the www-data inside of the container. If ommitted this
    # will default to the LANDO_WEBROOT_USER envvar for the service and then root.
    # if undefiend. You can also pass in user:group.
    #
    # Note that the user needs to already exist inside of the container
    user: www-data

  # Define `lando mysql` as a command that will drop the user into a mysql shell
  # inside of the database service
  mysql:
    service: database
    description: Drop into a MySQL shell

  # Define a tooling command with a stringed command
  test:
    service: appserver
    cmd: composer test
    description: Run our tests

  # Define `lando word` that passes through to a script that can handle options.
  # The script is mounted into our appserver in the service overrides above
  #
  # This script doesnt really do anything it's just to demonstrate options declaration
  # for the lando cli eg if you run `lando word -- --help` you should see some
  # options.
  #
  # Note that you can also specify options for the commands above as well but
  # generally it makes more sense to just delegate to the options of the command
  # you are invoking itself
  #
  # Note that options get passed into commands no matter what and AS IS. They do
  # not need to be defined explicitly here. This is purely to provide helpers
  # when running `lando CMD -- --help` or to get interactive prompts. As an
  # example try running `lando word -w bird --surprise`. `--surprise` is not defined below but
  # has a handler in our word.sh.
  word:
    service: appserver
    cmd: /helpers/word.sh
    options:
      word:
        # If you are specifying interactive options, as is the case here,
        # you will want to set passthrough to true so that interactive answers
        # get translated into command line args for the script to handle
        passthrough: true
        alias:
          - w
        describe: Print what the word is
        interactive:
          type: input
          message: What is the word?
          default: bird
          weight: 600

  # Define `lando npm` so that it also requires the `database` service to be running
  # in order to work.
  #
  # This is useful for complex commands that can act on multiple services eg
  # a database-import, or drush status check, or pull from a hosting provider
  # like pantheon
  npm:
    service: cli

    # Add a string or array of services that also need to load up for this
    # command to function properly
    needs:
      - database

  # Define `lando dynamic` so that it can run on different services based on
  # the `--service` flag instead of a hardcoded option
  #
  # This is useful for complex commands that can act on multiple services eg
  # a database-import, or drush status check, or pull from a hosting provider
  # like pantheon
  dynamic:

    # Just print the hostname so we know what service we are on
    cmd: printenv LANDO_SERVICE_NAME

    # The format :NAME will use the service specified by the NAME flag
    # You likely will want to specify the option below and set a reasonable
    # default
    service: :service

    # Specify a service option to handle the above
    options:
      service:
        default: appserver
        alias:
          - s
        describe: Run a different service
